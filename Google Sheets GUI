import tkinter as tk
from tkinter import messagebox
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import pandas as pd

# Google Sheets setup
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = r'******************************'

credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build('sheets', 'v4', credentials=credentials)

# ID and range of spreadsheet
SPREADSHEET_ID = '**************'
RANGE_NAME = '************'

def get_sheet_data():
    # Call the Sheets API to fetch data
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])

    # Handle cases where some rows have fewer columns than the header
    if values:
        num_cols = len(values[0])  # Number of columns in the header row
        values = [row + [None]*(num_cols - len(row)) for row in values]

    return pd.DataFrame(values[1:], columns=values[0]) if values else pd.DataFrame()

def validate_ip():
    ip_address = ip_entry.get()
    df = get_sheet_data()
    if ip_address in df['IP address'].fillna('').values:
        repair_date_entry.config(state='normal')
        repair_desc_entry.config(state='normal')
        submit_button.config(state='normal')
    else:
        messagebox.showerror("Error", "IP Address not found in the sheet.")
        repair_date_entry.config(state='disabled')
        repair_desc_entry.config(state='disabled')
        submit_button.config(state='disabled')

def submit_repair_data():
    ip_address = ip_entry.get()
    repair_date = repair_date_entry.get()
    repair_desc = repair_desc_entry.get()
    combined_info = f"{repair_date}: {repair_desc}"

    df = get_sheet_data()

    if any(combined_info in str(x) for x in df.loc[df['IP address'].fillna('') == ip_address, df.columns.str.contains('repair date and discription')].values.flatten()):
        messagebox.showerror("Error", "This repair data has already been entered for this IP address.")
        return

    row_index = df.index[df['IP address'].fillna('') == ip_address].tolist()
    if row_index:
        row_index = row_index[0] + 1  # Adjusting for header row
        for i, col in enumerate(df.columns):
            if "repair date and discription" in col and pd.isna(df.at[row_index - 1, col]):
                update_range = f'{RANGE_NAME}!{chr(65 + i)}{row_index + 1}'
                values = [[combined_info]]
                body = {'values': values}
                result = service.spreadsheets().values().update(
                    spreadsheetId=SPREADSHEET_ID, range=update_range,
                    valueInputOption='USER_ENTERED', body=body).execute()
                messagebox.showinfo("Success", "Sheet updated successfully.")
                return
        messagebox.showerror("Error", "No empty repair date and description column found.")
    else:
        messagebox.showerror("Error", "Error updating the sheet.")

root = tk.Tk()
root.title("Sheet Editor")

tk.Label(root, text="Enter IP Address:").grid(row=0, column=0)
ip_entry = tk.Entry(root)
ip_entry.grid(row=0, column=1)

validate_button = tk.Button(root, text="Validate IP", command=validate_ip)
validate_button.grid(row=0, column=2)

tk.Label(root, text="Enter Repair Date:").grid(row=1, column=0)
repair_date_entry = tk.Entry(root, state='disabled')
repair_date_entry.grid(row=1, column=1)

tk.Label(root, text="Enter Repair Description:").grid(row=2, column=0)
repair_desc_entry = tk.Entry(root, state='disabled')
repair_desc_entry.grid(row=2, column=1)

submit_button = tk.Button(root, text="Submit Repair Data", command=submit_repair_data, state='disabled')
submit_button.grid(row=3, column=1)

root.mainloop()
